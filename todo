

0) number of produced scintillation photons match the value expected (37keV). PMT hits for no source reflection roughly match the one calculated by Vera using the solid angle (discrepancy only due to wrong distance). However, this value is much higher than the measured one. 

2) which parameters to change and how in order to match observed PE value: 

   ** First: only mean value matching for both absorber and TTX (100 events)
	- input values in tables to be read, so that program does not need to be built everytime
		- AlS reflection (%) (0-30%, 5% step) and (SS/SL/BS)  // no much difference between SS and SL, so I will keep SL fixed at 0.1, vary SS from 0. to 0.5, BS from 0. to 0.3 -> Total: 6x6X4=144 x 100 events: ~15Gb
		- QE PMT
		- q_factor LY

---> To run it in batch (without building again): make it read from different spectrum data files for each time it runs (running in paralell) or sequential batch (change spectrum txt files and read again, run after run)
	* bash script that:
		i) copies opticaldata main file to sim/opticaldata_i, 
		ii) varies values of ALS_r, QE, LY,
		iv) sources standard bashrc
		 v) exports LARSOPTICALDATA=$LARSDIR/opticalData, runs the code changing root output name
			- for running the code: sequentially system ("export blabla && ./LArS blabla") or
			- in batch mode: system('sbatch --job-name=%s --time=%s --output=%s (as in https://github.com/Physik-Institut-UZH/Gator_2020/blob/master/simulations/gator_v2.0/GatorSims.py) 

	- produce plots of vary value vs mean PE value 
	- is 200 PE enough? if so, do I have space? - Maybe start with 200 only for PE matching and then go for higher N and shape matching.


- mgf2_LAr Surface needs to be implemented (or it is going to be taken as smooth and use the refractive indexes to calculater R?) -> For the simple case of a perfectly smooth interface between two dielectric materials, all the user needs to provide are the refractive indices (RINDEX) of the two materials stored in their respective G4MaterialPropertiesTables.

- why smoothness of tpb 0.5? - this doesn't seem to be working anyway

- there is no way to define TPB+TTX as one surface since materials are different, with diff WLSE, R, and son on -> but I can tune parameters so that R of TPB+TTX is similar to measured. In surfaces LArToTPBOnTetratex uses properties from TPB on TTX, but in the constructor, it is set LArtoTPB

- are the photons killed if no ref_index is defined and materials are diel_diel or can I define only reflectivity/etc?

-finish reading doke paper 1992

- why are all the surfaces doubled in LArsDetector construction? Including acrylic and TPB?: G4LogicalBorderSurface always specifies two surfaces for a volume

- for PEN there is no LAr layer in between yet (simulate slowly increasing the layer size from 0 to 0.1mm) -> Get Optical surface in detector construction (wallcell) will also depend on it (TTX to PEN, PEN to LAR or TTX to LAr, LAr to PEN, PEN LAr)

- Rayleigh can be calculated using the material property ISOTHERMAL_COMPRESSIBILITY. 
- mie scattering is probably negligible?

- skin surface for TPB coating? (example in listing 71) -> unified model, Surface most likely  ground or ground back painted (set reflectivity/ transmission/ absorption instead of refractive indexes?) -> see listing 73

- for the source, one can use OpSurface->SetPolish(0.8); -> listing 74 (only with glisur or also with unified model?)

- xp, zp drawing: for all the steps or for specific ones?

- interporlation of optical values is done linearly  as default. Xet it to spline?  MPT->AddProperty("RINDEX", energy, rindex)->SetSpline(true);

- Check hits and hit maps: https://geant4-userdoc.web.cern.ch/UsersGuides/ForApplicationDeveloper/html/Detector/hit.html then go on with tracking and physics

- Actually, LArS does not need a particle definition file, it could use simply gps -> maybe set change to gps?


##################### SET PARTICLE TYPE ##################

somehow, when setting the perparticle type, no photons are produced. Cout number to understand what is happening (getproperty blabla) -> event though this did not work, fano factor started working

there are some threshold cuts set in the physics list... (core dumps when default value is set to less than .01mm and when cuts are commented out more photons are produced - but yet not right) - Unsure whether this could be related - Also, the physics  list could be simplified... a good example may be ~/geant4/geant4.10.07/examples/advanced/underground_physics

ByParticleType works well for ~/geant4/geant4.10.07/examples/extended/optical/OpNovice2

############################# PHYSICS LIST #######################

  defaultCutValue =0.1mm;// seems to be to high -> changed in dmx example physics list, cut value is set to 1nm for electrons


######## MIN ENERGY CUT? ###############

================================================================
=======================================================================
======       Pre-compound/De-excitation Physics Parameters     ========
=======================================================================
...
Min excitation energy (keV)                         0.01
it seems that a min excitation energy was defined - but I do not find this anywhere... I even played a bit with values in the physics list, but that made no difference

########### analysis steps ############
- run the simulation varying: 1) ph/MeV 2) reflectivity of source -> easy fix for now: reflectivity of the source still 0 and change of photon yield to reproduce mean of ~520
- check the effect of degraded alphas into the real spectrum (the one of non degraded alphas)
- run the simulation varying: 1) reflectiv absorber 2) QE PMT



//---------------------

########### GIF ###########
3 animated pads with timer. on the first one: 3D plot, with a running line. On the second one, the xy projections and on the 3rd one the yz.
make gif by following hsumanim.C or makegif.C (otherwise, save canvases as figures and use some bash command to make the gif)
--> This method may be much more lightweight than using the graphical mode and the cursor.



TDirectoryFile *pDir = (TDirectoryFile *) _file0->Get("events");
TTree *pTree = (TTree *) pDir->Get("events");

int nbins=120;
TH3F *hist3 = new TH3F("hist3","hist3",nbins, -60, 60,nbins, -60, 60,nbins,-190,-70)
pTree->Draw("zp:yp:xp>>hist3");

TCanvas *c3=new TCanvas("c3","c3",1600, 1000);
c3->Divide(2,1); c3->cd(1);
hist3->Draw() ; //"box2 z"

int step=10;//range each 10 bins; 
for (int i=0; i<(nbins/step); i++)
{
	int bin_init=i, bin_end=(i+1)*step;
	stringstream sbin; sbin<<bin_end;
	system("sleep 4");
	c3->cd(2);
	hist3->Project3D("xy"); //("xy"+sbin.str()).c_str());
	hist3_xy->Draw("colz");
}
	
	


TH2F *hist2xy = new TH2F("hist2xy","hist2xy",120, -60, 60,120, -60, 60);
TH2F *hist2xy= hist3->Project3D("xy")


TCanvas *c1_n3=new TCanvas("c1_n3","c1_n3",500,600);
hist3->SetShowProjection("xy surf3");//hist3_zy->Draw("surf3")
//gPad->SetName("c_proj");



c3->Modified(); c1_n3->Modified();
c3->Update();c1_n3->Update();
c3->Print("3D.gif+");c1_n3->Print("proj.gif+");


TH3F *hist3 = new TH3F("hist3","hist3",120, -60, 60,120, -60, 60,120,-190,-70)






root [20] _file0->Open("pad.root","READ")
(TFile *) 0x55a213c42c30
root [21] c3->cd(2)
(TVirtualPad *) 0x55a2141f54b0
root [22] .ls
TFile**		pad.root	
 TFile*		pad.root	
  KEY: TCanvas	c_565121675bb0_projection_104;1	c1_n3
root [23] c_565121675bb0_projection_104->Draw()
root [24] TCanvas *p2 =  (TCanvas *)_file0->Get("c_565121675bb0_projection_104")
(TCanvas *) 0x55a215e727f0
root [25] c3->cd(2)
(TVirtualPad *) 0x55a2141f54b0
root [26] p2->DrawClonePad();



//###########################





################### Reflectivity and surface of the source ################

	- large effect whether it is specular or diffuse
	- increasing the reflectivity of the source from 0 to 5% increased the light yield in the PMT by 9.5%!!! and from 0 to 1 by 160% this means that from the photons that go toward the source, a large part of them get reflected preferentially in the direction of the source?
	- ps: diel_diel completely killed the increase in LY due to reflection
	- backpainted


//*********** CONST PROPERTY NOT WORKING ********************
//pmt hits (ref 0.4) model glisur -> all values the same for glisur
//------------------------- i) polished:957 ii) setpolish 0.2: 950 iii) ground" 957


//pmt hits (ref 0.4) model unified
//------------------------- i) polished: 944 ii) groundbackpainted: 679  iii) ground: 1200

//pmt hits (ref 0.0) model unified
//------------------------- i) polished:  ii) groundbackpainted: 684  iii) ground: 674
//ps: gbp: a refractive index should be defined for the surface (apart from the one for the material)

//pmt hits (ref 0.1) unified -> PMT hits change from ground to polished but are independent of alpha
//-------------------------   i)  ground: 810   ii) ground (a=0.2): 815 iii) ground (a=5): 804  iii) ground (a=20): 815
//--------------------------- iv) polished: 739 v) polished (a=5): 744 v) polished (a=20): 737 v) polished (a=0.2): 748

//pmt hits (ref 0.8) unified -> PMT hits change from ground to polished but are independent of alpha
//-------------------------  i)  ground: 1717  ii) ground (a=0.02): 1724 iii) ground (a=0.2):1724  iii) ground (a=0): 1711
//------------------------- iv) polished: 1226 v) polished (a=1):1222  v) polished (a=20): 1222 v) polished (a=0.3): 1220 
//------------------------- i) polished:  ii) polished (l=0.1):  iii) polished (l=0.3): 1221  iii) polished (l 0.5 oe l=0.5& sl=0.5): 1224
//--------------------------i) ground, a=0.5, L=0.5, SL=0.4
//--------------------------i) GFP: 1724
//--------------------------i) GBP: 682
//*************************************************************


//** Add property vector
//pmt hits (ref 0.8) unified i) ground (ss=0.7, sl=0.1, bs=0):1314  ii) ground changing roughness/smoothness and changin sigma alpha did not change anything
//-------------------------- ii) polished (ss=0.7, sl=0.1, bs=0 or SS=01):1216 iii) polished (a=0.1 or 0.3):1219 -> values don't change (setting smothness/roughness)=0.5 also did not change

#######################################################################################



	
######## refractive index of the PMT window and its QE ###########
now implemented, but reflectivity is set to 0 - does it make a change
-> Setting the refractive index of the window is not = to changing its QE, since it depends on the angle the photons arrive
->  If QE includes the transmission of the window, this means that it is medium dependent - but this does not seem to be the case usually reported (ex Measurement of the absolute Quantum Efficiency of Hamamatsu model R11410-10 photomultiplier tubes at low temperatures down to liquid xenon boiling point)
-> Also QE may increase at low T and not equally for all WLs 



#############################################################

- equations -dependence

- TTX result may depend on the att_lenght -> note, a refractive index is given in the simulation but it is from ptfe. Not sure if Rindex is needed once the reflectivity was given... -> it seems to me that once the surface finish is set to groundfrontpainted only the reflectivity matters.
-> Rindex is important for cherenkov light


- construct both tpb and PEN as 2 volumes. For PEN let some space in between - make the surface also rough

change material in pmt cell, change surface in detector constructor, change eff in opticalsurfacesp: 
problem: photons are going through the TPBonTTX. Maybe I will have to create 2 surfaces in detector construction




############ TODOS:

	*** check if parameters for TTX are relevant:
    rindex_Tetratex[i] = 1.51;// Molded Unpolished PTFE https://arxiv.org/pdf/0910.1056.pdf
    eff_Tetratex[i] = 1.;
    pdTeflonSpecularLobe[i] = 1.0;
    pdTeflonSpecularSpike[i] = 0.01; 
    pdTeflonBackscatter[i] = 0.01;

!! inserting reflection did not work:  PE values are like absorbing surface - changing TPB QE did not change values, commenting out the abs line did not help (another problem in these tests was that all the surfaces were WLSR)

!!! absorption spectrum of tpb: it is quoted in absorption length, probably in nm. This means that it is thickness dependent, but I did not input the thickness of TPB anywhere....

!!! the root file does not save information about the photons: total number and where they were absorbed


- read reflectivity from file, bash script to send jobs changing the values in the files, compiling the script again and running it producing root files with the right names (ps: necessary to transfer the code to farm first)



tha additional smearing in the data is probably coming from the distribution of photon yield (which seems to be taken as a constant value now)

#############LArSOpticalMaterialProperties.cc###### LArSOpticalMaterialProperties.cc

change triplet value (1590.0*ns)

note, the property of the absorber is set in LArSOpticalSurfaces.cc and is not read from a spectrum file.
Also note that the optical properties of the materials (LArSMaterials.cc) is not relevant, since the optical properties that are used are actually the ones constructed in the surfaces (LArSOpticalSurfaces.cc). The objects and their optical surfaces are linked in larsdetectorconstruction.cc (using G4LogicalBorderSurface). (material of the absorber is set as delrin, but the surface as metalvelvet with properties of the blacktable/blackreflectivity

********** Rayleigh scattering ################

previous values:
WL: 130.837 nm Energy: 9.47627 eV; Refr: 1.39687 ; Rayleigh l. 0.862258 m
WL: 129.059 nm Energy: 9.60676 eV; Refr: 1.4058 ; Rayleigh l. 0.765259 m
WL: 127.33 nm Energy: 9.73726 eV; Refr: 1.41562 ; Rayleigh l. 0.676178 m
WL: 125.646 nm Energy: 9.86776 eV; Refr: 1.42646 ; Rayleigh l. 0.594296 m


new ones

WL: 130.837 nm Energy: 9.47627 eV; Refr: 1.34147 ; Rayleigh l. 1.31985 m
WL: 129.059 nm Energy: 9.60676 eV; Refr: 1.35181 ; Rayleigh l. 1.14994 m
WL: 127.33 nm Energy: 9.73726 eV; Refr: 1.36369 ; Rayleigh l. 0.992561 m
WL: 125.646 nm Energy: 9.86776 eV; Refr: 1.37745 ; Rayleigh l. 0.846986 m

###############################################



################### previous issues #########################

	*** solve problem of not shifting/changing efficiency TPB on TTX (try TPB only maybe?)
		1) new physics list and verbose level:
			-> there is no "new" physics list, there is only an initializer of G4OpticalPhysics(1) - be careful not to initialize it twice, this doubles somehow the number of photons
			-> The verbose level 2 shows the interactions and it was lambertian reflection for the previous finish now it complains ***noReindex*** even thout it is added as property
		- 

### Optical physics constructed.
Loaded preinit macro: macros/preinit.mac
Loaded run macro: macros/run_alpha.mac

in preinit:

# physics list to select
/run/physics/setEMlowEnergyModel emlivermore
/run/physics/setHadronicModel    QGSP_BERT_HP
/run/physics/setCerenkov         false

Soulution: change material in the construction, not only surface


		2) change type of finish: from groundfrontpainted (only lambertian reflection) to ground: it stops reflecting, so all photons are absorbed :( -> This was because for the WLS also the material in the PMT cell code needs to be changed, no only the surface. For reflective surface finishes, changing only the surface works



############################################################

#########################################

The energy of the alpha particle matters because not all ot the alpha particles are depositing its full energy in LAr (some will deposit part of its energy in the source material) - however, these degraded alphas do not appear as a tail in the pmt hit plot...

the particle gun is at -185.49 and the source is at -185.499, so the particle gun is very close to the source and how close to the source it is seems to make a slight difference about how photons die on there, but this can be adjusted by the global of photons produced that go up. ps: the source size also seems to be understimatted (1mm diameter)

############## cleaning and improvements ######################

- also clean a bit the branches (comment out LArSAnalysisManager.cc)
- thickness PMT window maybe 2mm?

######### Source position ##############

  alphaSource_physical = new G4PVPlacement(0,G4ThreeVector(0.,0.,(-219.5+148-topCellThickness/(mm)-wallCellHeight/(mm)+alphaThickness/(2*mm))*mm ),alphaSource_logical,"alphaSource_physical",LAr_logical,0,false,0); -> not quite, a bit above. getting the source 0.1mm a bit too low makes it yield no photons


###########################################################################

To run alphas on the bottom of the PMT cell do:
./bin/LArS -p macros/preinit.mac -f macros/run_alpha.mac -n 100
./bin/LArS -p macros/preinit.mac -f macros/run_geantino_all.mac -v qt -i true
futher options:
	-o outputfile.root
	-v opengl :(or vrml or qt) for visualization
	-f macro.mac : file to be run
	-n n_eventstoberun

###########################################################################


#########  A few code modifications/ issues ###########

*** LArSOpticalMaterialProperties.cc

------- lar properties --------
- changed G4double temp from 88.5 to 87K
- myMPT1->AddConstProperty("YIELDRATIO",0.3); -> I think 0.3 is the value for betas. For alphas it's quite higher, not sure about the number. Anyway, changing this number did not change anything on the simulations results, which is weird.... singlet triplet 
- also varying the fano factor (and therefore the resolution scale of the light yield) did not change anything in the results ps: this does not seem to be a bug like "the properties table is not updating at all" since once I change the photon_yield for instance, the simulation does change accordingly. 

***** LArSOpticalSurfaces.cc
Added a few new surfaces


***** LArSDetectorConstruction.cc
modified Mother_volume = pmtCell->Construct() to Mother_volume = pmtCell->Construct(bAcrylicWindow); This works well, the problem is that I did not manage to pass the boolean from the main to LArSDetectorConstruction::Construct(). not sure where this is called...

***** LArSPrimaryGeneratorAction.hh and .cc 
	-   G4GeneralParticleSource *   particleGun;//G4ParticleGun*   particleGun; edit by Gabriela
	-  particleGun  = new G4GeneralParticleSource();

why xenoscope/gun 


***** Root file:
	- is there a hit map for (absorption, reflection, transmission)?
	- is there something we can clean to make the simulation more light?

######################################## NOTES ###########################################################

Then, I generated geantinos for 1keV (as below) and you do count ~43  photons produced (as expected)
The intersting part is that almost half of the photons "die" when reaching the source. (see the zoomed figure). 

Then, I run 1000 events and checked the mean number of the pmt hits using an alpha energy of either 1 or 5.486MeV. The weird thing is that it does not scale as it should

The result for 5.4MeV is the last one, and its PE value is just a bit below the measured one (520PE)

My guess is that: i) the reflectivity of the source might be the one causing the most of discrepancy between the simulated values and the one observed ones. The other factors are: the real number of ii) photons/MeV produced in LAr, iii) the reflectivity of the absorber and the iv) QE of the PMT).
I will assume for now that iii and iv have low uncertainties, so that we only have one single variable: "number of photons produced that go into the up or side directions". Thisc corresponds to i) convoluted with ii) and this can then be tuned to match the measured value. When comparing measurements with different samples, it will not matter much whether the independent values of the tuning of i) and ii) are the real ones, as long as the global i)*ii) is right.

My plan now is to tune this value for the absorber data and then right a script to send jobs varying the reflectivity of the sample, producing the root files and then "chaining them" to plot reflectivity vs pmt hits. 



